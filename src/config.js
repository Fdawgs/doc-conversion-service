require('custom-env').env();

const pino = require('pino');

const serverConfig = {
	https: process.env.USE_HTTPS || false,
	port: process.env.PORT || 3000,
	host: process.env.HOST,
	auth: {
		apiKeys: JSON.parse(process.env.API_BEARER_TOKEN_ARRAY)
	},
	ssl: {
		cert: process.env.SSL_CERT_PATH,
		key: process.env.SSL_KEY_PATH,
		pfx: {
			passphrase: process.env.PFX_PASSPHRASE,
			pfx: process.env.PFX_FILE_PATH
		}
	},
	routes: {
		'fhir/documentreference': {
			cors: {
				allowedHeaders:
					'Accept, Authorization, Content-Length, Content-Type, Origin',
				methods: ['POST', 'PUT'],
				origin: '*'
			},
			sanitize: {
				body: {
					document: { type: 'binary', mandatory: true },
					status: { type: 'string', mandatory: true },
					type: { type: 'string', mandatory: true },
					id: { type: 'number' },
					specialty: { type: 'string' },
					subject: { type: 'string' }
				}
			}
		},
		'fhir/binary': {
			cors: {
				allowedHeaders:
					'Accept, Authorization, Content-Length, Content-Type, Origin',
				methods: ['POST', 'PUT'],
				origin: '*'
			},
			sanitize: {
				body: {
					document: { type: 'binary', mandatory: true },
					id: { type: 'number' }
				}
			}
		},
		html: {
			cors: {
				allowedHeaders:
					'Accept, Authorization, Content-Length, Content-Type, Origin',
				methods: ['POST'],
				origin: '*'
			},

			/**
			 * Refer to http://api.html-tidy.org/tidy/tidylib_api_5.6.0/tidy_quickref.html for tidy options
			 *
			 * The following options have been turned on:
			 * - bare (remove Microsoft specific HTML and replace `&nbsp;` with spaces)
			 * - clean (replace legacy HTML tags)
			 * - dropProprietaryAttributes (remove proprietary attributes, such as Microsoft data binding attributes)
			 * - escapeCdata (convert <![CDATA[]]> sections to normal text)
			 * - sortAttributes (sort attributes in element in ascending alphabetic sort)
			 */
			htmltidy: {
				bare: true,
				clean: true,
				dropProprietaryAttributes: true,
				escapeCdata: true,
				sortAttributes: 'alpha'
			},
			poppler: {
				binPath: process.env.POPPLER_BINARY_PATH,
				encoding: 'UTF-8',
				/**
				 * Directory for temporarily storing
				 * files during conversion.
				 */
				tempDirectory: './src/server/temp/'
			},
			unrtf: {
				binPath: process.env.UNRTF_BINARY_PATH,
				/**
				 * Directory for temporarily storing
				 * files during conversion.
				 */
				tempDirectory: './src/server/temp/'
			}
		},
		txt: {
			cors: {
				allowedHeaders:
					'Accept, Authorization, Content-Length, Content-Type, Origin',
				methods: ['POST'],
				origin: '*'
			},
			poppler: {
				binPath: process.env.POPPLER_BINARY_PATH,
				/**
				 * Directory where HTML files and their images are temporarily held
				 * after being generated by Poppler
				 */
				tempDirectory: './src/server/temp/'
			},
			unrtf: {
				binPath: process.env.UNRTF_BINARY_PATH,
				/**
				 * Directory for temporarily storing
				 * files during conversion.
				 */
				tempDirectory: './src/server/temp/'
			}
		}
	}
};

/**
 * The following headers are turned on by default:
 * - dnsPrefetchControl (Control browser DNS prefetching). https://helmetjs.github.io/docs/dns-prefetch-control
 * - frameguard (prevent clickjacking). https://helmetjs.github.io/docs/frameguard
 * - hidePoweredBy (remove the X-Powered-By header). https://helmetjs.github.io/docs/hide-powered-by
 * - hsts (HTTP strict transport security). https://helmetjs.github.io/docs/hsts
 * - ieNoOpen (sets X-Download-Options for IE8+). https://helmetjs.github.io/docs/ienoopen
 * - noSniff (prevent clients from sniffing MIME type). https://helmetjs.github.io/docs/dont-sniff-mimetype
 * - xssFilter (adds small XSS protections). https://helmetjs.github.io/docs/xss-filter/
 */
const helmetConfig = {
	contentSecurityPolicy: {
		directives: {
			defaultSrc: ["'self'", 'fonts.gstatic.com'],
			scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
			styleSrc: ["'self'", "'unsafe-inline'", 'fonts.googleapis.com']
		}
	},
	frameguard: {
		action: 'deny'
	}
};

const loggerConfig = {
	// Pino options: https://github.com/pinojs/pino-http#custom-serializers
	options: {
		formatters: {
			level(label) {
				return { level: label };
			}
		},
		// Defaults to `info` if not set in env
		level: process.env.LOGGER_LEVEL || 'info',
		serializers: {
			req(req) {
				return pino.stdSerializers.req(req);
			},
			res(res) {
				return { statusCode: res.statusCode };
			}
		},
		timestamp: () => pino.stdTimeFunctions.isoTime()
	},

	// Rotation options: https://github.com/rogerc/file-stream-rotator/#options
	rotation: {
		date_format: process.env.LOGGER_ROTATION_DATE_FORMAT || 'YYYY-MM-DD',
		filename:
			process.env.LOGGER_ROTATION_FILENAME ||
			`${process.cwd()}/logs/doc-con-service-%DATE%.log`,
		frequency: process.env.LOGGER_ROTATION_FREQUENCY || 'daily',
		max_logs: process.env.LOGGER_ROTATION_MAX_LOG,
		size: process.env.LOGGER_ROTATION_MAX_SIZE,
		verbose: false
	}
};

module.exports = {
	helmetConfig,
	serverConfig,
	loggerConfig
};
